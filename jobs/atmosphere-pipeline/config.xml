<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.15">
  <actions/>
  <description>more advanced job, use pipeline as a code with groovy generator&#xd;
git checkout&#xd;
mvn clean test package&#xd;
archiving the artifacts&#xd;
If you feel strong enough :&#xd;
-Add JUnit report as part of the pipe.&#xd;
-Configure SMTP server (can be local) </description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.42">
    <script>node {
    //notify(&apos;Started&apos;)
    try {
        stage(&apos;checkout&apos;) {
            git &apos;https://github.com/ofirgut007/ex-course-spring-boot.git&apos;
            //extensions: [[$class: &apos;CloneOption&apos;, timeout: 220]]
        }
        
    
        def project_path = &quot;spring-boot-samples/spring-boot-sample-atmosphere/&quot;
    
        dir(project_path) {
    
            stage(&apos;Maccabi Haifa&apos;) {
                sh &apos;mvn clean test package&apos;
            }
            
            stage(&apos;Hapoel Haifa&apos;){
                archiveArtifacts &quot;target/*.jar&quot;
            }
        }
        
    notify(&apos;Success&apos;)
    
    } catch (err) {
        //notify(&quot;Error: ${err}&quot;)
        echo &quot;Caught: ${err}&quot;
        currentBuild.result = &apos;FAILURE&apos;
    }
}

def notify(status){
    emailext (
      to: &quot;ofirgut007@gmail.com&quot;,
      subject: &quot;${status}: Job &apos;${env.JOB_NAME} [${env.BUILD_NUMBER}]&apos;&quot;,
      body: &quot;&quot;&quot;&lt;p&gt;${status}: Job &apos;${env.JOB_NAME} [${env.BUILD_NUMBER}]&apos;:&lt;/p&gt;
        &lt;p&gt;Check console output at &lt;a href=&apos;${env.BUILD_URL}&apos;&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&lt;/p&gt;&quot;&quot;&quot;,
    )
}




</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>